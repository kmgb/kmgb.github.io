---
title: Web Automation - Kevin Brennan
description: My exploration of web automation using JavaScript, Playwright, and AutoHotkey.
date: "2023-12-18"
---
<script>
    function clickExampleButton(event) {
        alert((event.isTrusted) ? "You clicked the button!" : "You used JavaScript to click the button!");
    }
</script>

<main>
<article>
<h1>Web Automation</h1>
<p>
    Web automation refers to automating interactions with websites. This can be done for a variety of reasons, such as
    testing a website, scraping data from a website, or automating a task that would otherwise be tedious to do by hand.
    My exploration of web automation will explore JavaScript, Playwright, and AutoHotkey. I will discuss each method
    and the advantages and disadvantages of each, with a particular focus on detectability.
</p>
<p>
    Detectability is important to discuss in the current age of web technology, where automation is fought more and
    more by detection scripts like reCaptcha v3 and Cloudflare bot detection, among others. For good reason, too. No
    website owner wants their website to be scraped by bots and have their work made irrelevant by other websites
    reposting their content or fed into large language models. There are, however, still moral, smaller-scale
    applications of automation, and having working methods is important.
</p>

<section>
<h2>JavaScript</h2>
<p>
    One of the easiest ways to get into web automation is simply using JavaScript in the browser. This can be done
    using your browser's developer console or using a JavaScript-injection extension
    (<a href="https://github.com/violentmonkey/violentmonkey">Violentmonkey</a> works on both Firefox and Chrome and is
    open-source.) This method covers the majority of use-cases.
</p>
<p>
    As a very easy example, try clicking the button below and observe the result.
</p>
<button id="example-button" type="button" onclick="clickExampleButton(event)">Click me</button>
<p>
    Now, try doing the same thing with JavaScript by entering the developer console
    (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd> on Chrome or <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>K</kbd> on
    Firefox), and type the following:
    <pre class="cpp"><code>document.querySelector('#example-button').click()</code></pre>
</p>
<p>
    Both clicking the button above and using JavaScript to click the button will result in an alert. However, the
    message is different when using JavaScript. This is because websites can easily distinguish whether an action was
    performed by a user or by JavaScript. The technical details for this detection are as follows: when a user performs
    an action, an <code>Event</code> object is generated and passed to event handlers. This object contains an
    immutable property set by the browser called <code>isTrusted</code>, which is <code>true</code> when the event was
    generated by a user and <code>false</code> when the event was generated by JavaScript. So a website (and bot
    protection script) need only check whether <code>event.isTrusted === false</code> to see if an action was performed
    by JavaScript.
</p>
</section>

<section>
<h2>Playwright/Puppeteer/Selenium</h2>
<p>
    <a href="https://playwright.dev/">Playwright</a> is a library used for creating and controlling browser instances
    (Chrome, Firefox, Edge or Safari) for the purpose of test automation. Other similar libraries include
    <a href="https://pptr.dev/">Puppeteer</a> (which only supports Chrome) and
    <a href="https://www.selenium.dev/">Selenium</a> (which has been around much longer). All of these libraries are
    similar and have the same fundamental advantages and disadvantages.
</p>
<p>
    These libraries work by creating a browser instance and then allowing you to send commands to the browser. These
    commands include navigating to a URL, clicking an element, querying for information on a webpage, typing text, etc.
    One advantage over plain JavaScript is that the <code>Event.isTrusted</code> property is set to true for any events
    generated. This avoids that very trivial detection method.
</p>
<p>
    There are, however, other ways to detect automation from these libraries. This includes a numerous list of
    JavaScript APIs that are modified in the browser instance, User-Agent strings, and the existence of extra global
    JavaScript variables created by the libraries for their functionality. For that reason, there are packages like
    playwright-stealth, puppeteer-extra-plugin-stealth and selenium-stealth, which attempt to hide these discrepancies
    from normal browsers. However, these packages are not perfect at hiding the numerous differences and are not
    necessarily kept up to date.
</p>
</section>

<section>
<h2>AutoHotkey</h2>
<p>
    <a href="https://www.autohotkey.com/">AutoHotkey</a> is an automation scripting language for Windows capable of
    automating many operating system tasks like keyboard and mouse actions. It is very powerful and can be used for a
    variety of tasks, including web automation. All you need is to use a normal browser and create an AutoHotkey script
    capable of interacting with the web content through keyboard and mouse commands.
</p>
<p>
    While AutoHotkey is not purpose-built for web automation, it's possible to query for the browser window position
    and size, take a screenshot, then use <code>ImageSearch</code> to look for coordinates of a particular part of the
    page. This gives you the ability to interact with elements on the page given how they look.
</p>
<p>
    This is notably less convenient than using JavaScript or a purpose-built web automation library because you can't
    directly query for elements, but it has the advantage of not being nearly as detectable by the website. It uses the
    same browser as a normal user, and the <code>Event.isTrusted</code> value is true because as far as the browser is
    concerned, the user is performing the actions. The only way to detect this is to observe mouse movements or typing
    speed to determine if a bot is performing the actions, but this can also be mitigated by slightly randomizing
    movements and timing and making typing speed more realistic.
</p>
</section>

<section>
<h2>Conclusion</h2>
<p>
    There are many ways to automate web tasks, and each has its own advantages and disadvantages. JavaScript is the
    easiest to get started with, but is also the most detectable. Playwright/Puppeteer/Selenium are more difficult to
    get started with, but are slightly less detectable, especially with precautions. AutoHotkey is the most difficult
    to get started with, but is the least detectable with only mouse and keyboard interactions to monitor.
</p>
<p>
    In general, I would recommend JavaScript for most tasks like userscripts for improving website functionality while
    you're using it. For actual testing of your own websites or automation on websites that don't employ bot detection,
    Playwright/Puppeteer/Selenium are good options because of their convenience and programming language bindings,
    which are useful for actually processing the data from the automation. For automation on websites that employ bot
    detection, AutoHotkey is the best option because of its low detectability when the correct precautions are taken.
</p>
</section>
</article>
</main>